import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.annotation.WebServlet;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

// Model classes
class Product {
    private int id;
    private String name;
    private double price;
    private int stock;
    private String category;

    public Product(int id, String name, double price, int stock, String category) {
        this.id = id;
        this.name = name;
        this.price = price;
        this.stock = stock;
        this.category = category;
    }

    // Getters and setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public double getPrice() { return price; }
    public void setPrice(double price) { this.price = price; }
    public int getStock() { return stock; }
    public void setStock(int stock) { this.stock = stock; }
    public String getCategory() { return category; }
    public void setCategory(String category) { this.category = category; }
}

class Order {
    private int id;
    private String customerName;
    private double totalAmount;
    private String status;
    private List<Product> products;

    public Order(int id, String customerName, double totalAmount, String status) {
        this.id = id;
        this.customerName = customerName;
        this.totalAmount = totalAmount;
        this.status = status;
        this.products = new ArrayList<>();
    }

    // Getters and setters
    public int getId() { return id; }
    public String getCustomerName() { return customerName; }
    public double getTotalAmount() { return totalAmount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
    public List<Product> getProducts() { return products; }
    public void addProduct(Product product) { this.products.add(product); }
}

// Database Utility
class DatabaseUtil {
    private Connection connection;

    public DatabaseUtil(Connection connection) {
        this.connection = connection;
    }

    // Product Management Methods
    public List<Product> getAllProducts() {
        List<Product> products = new ArrayList<>();
        try {
            PreparedStatement stmt = connection.prepareStatement("SELECT * FROM products");
            ResultSet rs = stmt.executeQuery();
            
            while (rs.next()) {
                Product product = new Product(
                    rs.getInt("id"),
                    rs.getString("name"),
                    rs.getDouble("price"),
                    rs.getInt("stock"),
                    rs.getString("category")
                );
                products.add(product);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return products;
    }

    public boolean addProduct(Product product) {
        try {
            PreparedStatement stmt = connection.prepareStatement(
                "INSERT INTO products (name, price, stock, category) VALUES (?, ?, ?, ?)"
            );
            stmt.setString(1, product.getName());
            stmt.setDouble(2, product.getPrice());
            stmt.setInt(3, product.getStock());
            stmt.setString(4, product.getCategory());
            
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    public boolean updateProduct(Product product) {
        try {
            PreparedStatement stmt = connection.prepareStatement(
                "UPDATE products SET name=?, price=?, stock=?, category=? WHERE id=?"
            );
            stmt.setString(1, product.getName());
            stmt.setDouble(2, product.getPrice());
            stmt.setInt(3, product.getStock());
            stmt.setString(4, product.getCategory());
            stmt.setInt(5, product.getId());
            
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // Order Management Methods
    public List<Order> getAllOrders() {
        List<Order> orders = new ArrayList<>();
        try {
            PreparedStatement stmt = connection.prepareStatement("SELECT * FROM orders");
            ResultSet rs = stmt.executeQuery();
            
            while (rs.next()) {
                Order order = new Order(
                    rs.getInt("id"),
                    rs.getString("customer_name"),
                    rs.getDouble("total_amount"),
                    rs.getString("status")
                );
                orders.add(order);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return orders;
    }

    public boolean updateOrderStatus(int orderId, String status) {
        try {
            PreparedStatement stmt = connection.prepareStatement(
                "UPDATE orders SET status=? WHERE id=?"
            );
            stmt.setString(1, status);
            stmt.setInt(2, orderId);
            
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
}

// Admin Servlet
@WebServlet("/admin")
public class AdminServlet extends HttpServlet {
    private DatabaseUtil databaseUtil;

    @Override
    public void init() {
        // Initialize database connection (in a real app, use connection pool)
        Connection connection = // Establish database connection
        databaseUtil = new DatabaseUtil(connection);
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws IOException {
        String action = request.getParameter("action");

        if (action == null) {
            // Default admin dashboard
            List<Product> products = databaseUtil.getAllProducts();
            List<Order> orders = databaseUtil.getAllOrders();

            request.setAttribute("products", products);
            request.setAttribute("orders", orders);
            request.getRequestDispatcher("/admin-dashboard.jsp").forward(request, response);
        } else {
            switch (action) {
                case "addProduct":
                    // Render add product form
                    request.getRequestDispatcher("/add-product.jsp").forward(request, response);
                    break;
                case "editProduct":
                    // Render edit product form
                    int productId = Integer.parseInt(request.getParameter("id"));
                    // Fetch product details and set as attribute
                    request.getRequestDispatcher("/edit-product.jsp").forward(request, response);
                    break;
                case "orders":
                    // Render orders management page
                    request.getRequestDispatcher("/manage-orders.jsp").forward(request, response);
                    break;
            }
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) 
            throws IOException {
        String action = request.getParameter("action");

        switch (action) {
            case "addProduct":
                // Handle product addition
                Product newProduct = new Product(
                    0, // ID will be generated by database
                    request.getParameter("name"),
                    Double.parseDouble(request.getParameter("price")),
                    Integer.parseInt(request.getParameter("stock")),
                    request.getParameter("category")
                );
                databaseUtil.addProduct(newProduct);
                response.sendRedirect("/admin?success=productAdded");
                break;

            case "updateProduct":
                // Handle product update
                Product updatedProduct = new Product(
                    Integer.parseInt(request.getParameter("id")),
                    request.getParameter("name"),
                    Double.parseDouble(request.getParameter("price")),
                    Integer.parseInt(request.getParameter("stock")),
                    request.getParameter("category")
                );
                databaseUtil.updateProduct(updatedProduct);
                response.sendRedirect("/admin?success=productUpdated");
                break;

            case "updateOrderStatus":
                // Handle order status update
                int orderId = Integer.parseInt(request.getParameter("orderId"));
                String status = request.getParameter("status");
                databaseUtil.updateOrderStatus(orderId, status);
                response.sendRedirect("/admin?action=orders&success=orderUpdated");
                break;
        }
    }
}import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.annotation.WebServlet;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

// Model classes
class Product {
    private int id;
    private String name;
    private double price;
    private int stock;
    private String category;

    public Product(int id, String name, double price, int stock, String category) {
        this.id = id;
        this.name = name;
        this.price = price;
        this.stock = stock;
        this.category = category;
    }

    // Getters and setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public double getPrice() { return price; }
    public void setPrice(double price) { this.price = price; }
    public int getStock() { return stock; }
    public void setStock(int stock) { this.stock = stock; }
    public String getCategory() { return category; }
    public void setCategory(String category) { this.category = category; }
}

class Order {
    private int id;
    private String customerName;
    private double totalAmount;
    private String status;
    private List<Product> products;

    public Order(int id, String customerName, double totalAmount, String status) {
        this.id = id;
        this.customerName = customerName;
        this.totalAmount = totalAmount;
        this.status = status;
        this.products = new ArrayList<>();
    }

    // Getters and setters
    public int getId() { return id; }
    public String getCustomerName() { return customerName; }
    public double getTotalAmount() { return totalAmount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
    public List<Product> getProducts() { return products; }
    public void addProduct(Product product) { this.products.add(product); }
}

// Database Utility
class DatabaseUtil {
    private Connection connection;

    public DatabaseUtil(Connection connection) {
        this.connection = connection;
    }

    // Product Management Methods
    public List<Product> getAllProducts() {
        List<Product> products = new ArrayList<>();
        try {
            PreparedStatement stmt = connection.prepareStatement("SELECT * FROM products");
            ResultSet rs = stmt.executeQuery();
            
            while (rs.next()) {
                Product product = new Product(
                    rs.getInt("id"),
                    rs.getString("name"),
                    rs.getDouble("price"),
                    rs.getInt("stock"),
                    rs.getString("category")
                );
                products.add(product);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return products;
    }

    public boolean addProduct(Product product) {
        try {
            PreparedStatement stmt = connection.prepareStatement(
                "INSERT INTO products (name, price, stock, category) VALUES (?, ?, ?, ?)"
            );
            stmt.setString(1, product.getName());
            stmt.setDouble(2, product.getPrice());
            stmt.setInt(3, product.getStock());
            stmt.setString(4, product.getCategory());
            
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    public boolean updateProduct(Product product) {
        try {
            PreparedStatement stmt = connection.prepareStatement(
                "UPDATE products SET name=?, price=?, stock=?, category=? WHERE id=?"
            );
            stmt.setString(1, product.getName());
            stmt.setDouble(2, product.getPrice());
            stmt.setInt(3, product.getStock());
            stmt.setString(4, product.getCategory());
            stmt.setInt(5, product.getId());
            
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // Order Management Methods
    public List<Order> getAllOrders() {
        List<Order> orders = new ArrayList<>();
        try {
            PreparedStatement stmt = connection.prepareStatement("SELECT * FROM orders");
            ResultSet rs = stmt.executeQuery();
            
            while (rs.next()) {
                Order order = new Order(
                    rs.getInt("id"),
                    rs.getString("customer_name"),
                    rs.getDouble("total_amount"),
                    rs.getString("status")
                );
                orders.add(order);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return orders;
    }

    public boolean updateOrderStatus(int orderId, String status) {
        try {
            PreparedStatement stmt = connection.prepareStatement(
                "UPDATE orders SET status=? WHERE id=?"
            );
            stmt.setString(1, status);
            stmt.setInt(2, orderId);
            
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
}

// Admin Servlet
@WebServlet("/admin")
public class AdminServlet extends HttpServlet {
    private DatabaseUtil databaseUtil;

    @Override
    public void init() {
        // Initialize database connection (in a real app, use connection pool)
        Connection connection = // Establish database connection
        databaseUtil = new DatabaseUtil(connection);
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws IOException {
        String action = request.getParameter("action");

        if (action == null) {
            // Default admin dashboard
            List<Product> products = databaseUtil.getAllProducts();
            List<Order> orders = databaseUtil.getAllOrders();

            request.setAttribute("products", products);
            request.setAttribute("orders", orders);
            request.getRequestDispatcher("/admin-dashboard.jsp").forward(request, response);
        } else {
            switch (action) {
                case "addProduct":
                    // Render add product form
                    request.getRequestDispatcher("/add-product.jsp").forward(request, response);
                    break;
                case "editProduct":
                    // Render edit product form
                    int productId = Integer.parseInt(request.getParameter("id"));
                    // Fetch product details and set as attribute
                    request.getRequestDispatcher("/edit-product.jsp").forward(request, response);
                    break;
                case "orders":
                    // Render orders management page
                    request.getRequestDispatcher("/manage-orders.jsp").forward(request, response);
                    break;
            }
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) 
            throws IOException {
        String action = request.getParameter("action");

        switch (action) {
            case "addProduct":
                // Handle product addition
                Product newProduct = new Product(
                    0, // ID will be generated by database
                    request.getParameter("name"),
                    Double.parseDouble(request.getParameter("price")),
                    Integer.parseInt(request.getParameter("stock")),
                    request.getParameter("category")
                );
                databaseUtil.addProduct(newProduct);
                response.sendRedirect("/admin?success=productAdded");
                break;

            case "updateProduct":
                // Handle product update
                Product updatedProduct = new Product(
                    Integer.parseInt(request.getParameter("id")),
                    request.getParameter("name"),
                    Double.parseDouble(request.getParameter("price")),
                    Integer.parseInt(request.getParameter("stock")),
                    request.getParameter("category")
                );
                databaseUtil.updateProduct(updatedProduct);
                response.sendRedirect("/admin?success=productUpdated");
                break;

            case "updateOrderStatus":
                // Handle order status update
                int orderId = Integer.parseInt(request.getParameter("orderId"));
                String status = request.getParameter("status");
                databaseUtil.updateOrderStatus(orderId, status);
                response.sendRedirect("/admin?action=orders&success=orderUpdated");
                break;
        }
    }
}
